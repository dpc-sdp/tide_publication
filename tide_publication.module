<?php

/**
 * @file
 * Tide Publication.
 */

use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\FieldStorageDefinitionInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\tide_publication\Navigation\Children;
use Drupal\tide_publication\Navigation\Next;
use Drupal\tide_publication\Navigation\Previous;
use Drupal\tide_publication\Navigation\Root;
use Drupal\tide_publication\TidePublicationFieldStorageDefinition;
use Drupal\user\Entity\Role;
use Drupal\workflows\Entity\Workflow;
use Drupal\Core\Url;

/**
 * Implements hook_entity_bundle_create().
 */
function tide_publication_entity_bundle_create($entity_type_id, $bundle) {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');

  if ($entity_type_id == 'node' && in_array($bundle, ['publication', 'publication_page'])) {
    // Grant permissions on Publication and Publication Page content types to
    // Approver and Editor.
    $roles = ['approver', 'editor'];
    $permissions = [
      'create publication content',
      'delete any publication content',
      'delete own publication content',
      'delete publication revisions',
      'edit any publication content',
      'edit own publication content',
      'revert publication revisions',
      'view publication revisions',
      'create publication_page content',
      'delete any publication_page content',
      'delete own publication_page content',
      'delete publication_page revisions',
      'edit any publication_page content',
      'edit own publication_page content',
      'revert publication_page revisions',
      'view publication_page revisions',
    ];

    foreach ($roles as $role_name) {
      $role = Role::load($role_name);
      if ($role) {
        foreach ($permissions as $permission) {
          $role->grantPermission($permission);
        }
        $role->save();
      }
    }

    // Enable Editorial workflow if workflow module is enabled.
    $moduleHandler = \Drupal::service('module_handler');
    if ($moduleHandler->moduleExists('workflows')) {
      $editorial_workflow = Workflow::load('editorial');
      if ($editorial_workflow) {
        $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', $bundle);
        $editorial_workflow->save();
      }
    }
  }

  // Add the Featured News and Embedded Webform paragraphs to Publication Page
  // components if exists.
  if ($entity_type_id == 'paragraph') {
    $field_config = FieldConfig::loadByName('node', 'publication_page', 'field_landing_page_component');
    if ($field_config) {
      $handler_settings = $field_config->getSetting('handler_settings');

      $is_featured_news = ($bundle == 'featured_news' && $moduleHandler->moduleExists('tide_news'));
      $is_embedded_webform = ($bundle == 'embedded_webform' && $moduleHandler->moduleExists('tide_webform'));
      if ($is_featured_news || $is_embedded_webform) {
        $handler_settings['target_bundles'][$bundle] = $bundle;
        $field_config->setSetting('handler_settings', $handler_settings);
        $field_config->save();
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function tide_publication_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $publication_forms = [
    'node_publication_form',
    'node_publication_edit_form',
    'node_publication_page_form',
    'node_publication_page_edit_form',
  ];
  if (in_array($form_id, $publication_forms)) {
    // Change form layout.
    $form['#attached']['library'][] = 'tide_landing_page/landing_page_form';
  }
}

/**
 * Implements hook_entity_bundle_field_info().
 */
function tide_publication_entity_bundle_field_info(EntityTypeInterface $entity_type, $bundle, array $base_field_definitions) {
  $fields = [];
  if ($entity_type->id() === 'node') {
    $default_settings = [
      'handler' => 'default:node',
      'handler_settings' => [
        'target_bundles' => [
          'publication' => 'publication',
          'publication_page' => 'publication_page',
        ],
      ],
    ];
    $default_display = [
      'label' => 'hidden',
      'region' => 'hidden',
      'weight' => 100,
    ];

    // Add the publication children and next navigation computed fields to
    // Publication content type.
    if ($bundle === 'publication') {
      $fields['publication_children'] = TidePublicationFieldStorageDefinition::create('entity_reference')
        ->setLabel(t('Publication Children'))
        ->setComputed(TRUE)
        ->setClass(Children::class)
        ->setReadOnly(FALSE)
        ->setInternal(FALSE)
        ->setCardinality(FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED)
        ->setSettings($default_settings)
        ->setDisplayOptions('view', $default_display)
        ->setDisplayOptions('form', $default_display)
        ->setTargetEntityTypeId($entity_type->id())
        ->setTargetBundle('publication')
        ->setName('publication_pages')
        ->setDisplayConfigurable('form', FALSE)
        ->setDisplayConfigurable('view', FALSE);

      $fields['publication_navigation_next'] = clone $fields['publication_children'];
      $fields['publication_navigation_next']->setClass(Next::class)
        ->setCardinality(1)
        ->setLabel('Publication Navigation Next')
        ->setName('publication_navigation_next');
    }
    // Add the publication root/prev/next navigation computed fields to
    // Publication Page content type.
    elseif ($bundle === 'publication_page') {
      $fields['publication_navigation_root'] = TidePublicationFieldStorageDefinition::create('entity_reference')
        ->setLabel(t('Publication Navigation Root'))
        ->setComputed(TRUE)
        ->setClass(Root::class)
        ->setReadOnly(FALSE)
        ->setInternal(FALSE)
        ->setCardinality(1)
        ->setSettings($default_settings)
        ->setDisplayOptions('view', $default_display)
        ->setDisplayOptions('form', $default_display)
        ->setTargetEntityTypeId($entity_type->id())
        ->setTargetBundle('publication_page')
        ->setName('publication_navigation_root')
        ->setDisplayConfigurable('form', FALSE)
        ->setDisplayConfigurable('view', FALSE);

      $fields['publication_navigation_prev'] = clone $fields['publication_navigation_root'];
      $fields['publication_navigation_prev']->setClass(Previous::class)
        ->setLabel('Publication Navigation Prev')
        ->setName('publication_navigation_prev');

      $fields['publication_navigation_next'] = clone $fields['publication_navigation_root'];
      $fields['publication_navigation_next']->setClass(Next::class)
        ->setLabel('Publication Navigation Next')
        ->setName('publication_navigation_next');
    }
  }

  return $fields;
}

/**
 * Implements hook_tide_entity_reference_site_enhancer_undo_transform_alter().
 *
 * @see \Drupal\tide_site\Plugin\jsonapi\FieldEnhancer\EntityReferenceSiteEnhancer::doUndoTransform()
 */
function tide_publication_tide_entity_reference_site_enhancer_undo_transform_alter(&$data, &$context, &$entity) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  if ($entity && in_array($entity->bundle(), ['publication', 'publication_page'])) {
    $summary = $entity->get('field_landing_page_summary')->getString();
    if ($summary) {
      $data['meta']['field_landing_page_summary'] = $summary;
    }
  }
}

/**
 * Implements hook_tide_path_enhancer_transform_alter().
 *
 * @see \Drupal\tide_site\Plugin\jsonapi\FieldEnhancer\EntityReferenceSiteEnhancer:::doTransform()
 */
function tide_publication_tide_entity_reference_site_enhancer_transform_alter(&$value, &$context) {
  unset($value['meta']['field_landing_page_summary']);
}

/**
 * Implements hook_form_alter().
 */
function tide_publication_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (\Drupal::routeMatch()->getRouteName() == 'entity.node.entity_hierarchy_reorder') {
    // Updates the destination of 'Create new Publication page' link
    // under /node/{node_id}/children page.
    if (isset($form['actions']['add_child']['#url']) && $form['actions']['add_child']['#url'] instanceof Url) {
      /** @var \Drupal\Core\Url $url */
      $url = $form['actions']['add_child']['#url'];
      $options = $url->getOptions();
      if (isset($options['query'][Root::PUBLICATION_FIELD_NAME]) && !empty($options['query'][Root::PUBLICATION_FIELD_NAME])) {
        $destination_option = ['destination' => "/node/{$options['query'][Root::PUBLICATION_FIELD_NAME]}/children"];
        $options = array_merge($options['query'], $destination_option);
        $url->setOption('query', $options);
        array_walk($form['children'], function ($item, $index) use ($destination_option) {
          if (is_numeric($index)) {
            // Updates the destination of the 'edit' link.
            if (isset($item['operations']['#links']['edit']['url']) && $item['operations']['#links']['edit']['url'] instanceof Url) {
              $item['operations']['#links']['edit']['url']->setOption('query', $destination_option);
            }
            // Updates the destination of the 'delete' link.
            if (isset($item['operations']['#links']['delete']['url']) && $item['operations']['#links']['delete']['url'] instanceof Url) {
              $item['operations']['#links']['delete']['url']->setOption('query', $destination_option);
            }
          }
        });
      }
    }
  }
}
