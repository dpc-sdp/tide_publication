<?php

/**
 * @file
 * Install file.
 */

use Drupal\Core\Entity\Entity\EntityFormDisplay;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\search_api\Item\Field;
use Drupal\user\Entity\Role;
use Drupal\workflows\Entity\Workflow;

/**
 * Implements hook_install().
 */
function tide_publication_install() {
  // Don't do anything else during config sync.
  if (\Drupal::isConfigSyncing()) {
    return;
  }

  // Enable Editorial workflow if workflow module is enabled.
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('workflows')) {
    $editorial_workflow = Workflow::load('editorial');
    if ($editorial_workflow) {
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'publication');
      $editorial_workflow->getTypePlugin()->addEntityTypeAndBundle('node', 'publication_page');
      $editorial_workflow->save();
    }
  }

  // Add re-order children permission for roles.
  if (\Drupal::moduleHandler()->moduleExists('entity_hierarchy')) {
    $roles = [
      'approver',
      'editor',
      'site_admin',
    ];
    foreach ($roles as $role_name) {
      $role = Role::load($role_name);
      if ($role) {
        $role->grantPermission('reorder entity_hierarchy children');
        $role->save();
      }
    }
  }

  _tide_publication_update_search_api_index();

  // Enable entity type/bundles for use with scheduled transitions.
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles = [];
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('publication', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'publication'];
        $config->set('bundles', $bundles)->save();
      }
      if (!in_array('publication_page', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'publication_page'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $publication_bundles = [
        'publication',
        'publication_page',
      ];
      foreach ($publication_bundles as $bundle) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => $bundle];
        $config->set('bundles', $bundles);
      }
      $config->save();
    }
  }
}

/**
 * Add fields to search API.
 */
function _tide_publication_update_search_api_index() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('tide_search')) {
    $index_storage = \Drupal::entityTypeManager()
      ->getStorage('search_api_index');
    /** @var \Drupal\search_api\IndexInterface $index */
    $index = $index_storage->load('node');

    // Index the Authors field.
    if (!$index->getField('field_publication_authors')) {
      $field_publication_authors = new Field($index, 'field_publication_authors');
      $field_publication_authors->setType('text');
      $field_publication_authors->setPropertyPath('field_publication_authors');
      $field_publication_authors->setDatasourceId('entity:node');
      $field_publication_authors->setLabel('Publication authors');
      $index->addField($field_publication_authors);
    }

    // Index the Publication date field.
    if (!$index->getField('field_publication_date')) {
      $field_publication_date = new Field($index, 'field_publication_date');
      $field_publication_date->setType('date');
      $field_publication_date->setPropertyPath('field_publication_date');
      $field_publication_date->setDatasourceId('entity:node');
      $field_publication_date->setBoost(1);
      $field_publication_date->setLabel('Date of Publication');
      $index->addField($field_publication_date);
    }

    // Index the Publication entity_reference field.
    if (!$index->getField('field_publication_title')) {
      $field_publication_title = new Field($index, 'field_publication_title');
      $field_publication_title->setType('string');
      $field_publication_title->setPropertyPath('field_publication:entity:title');
      $field_publication_title->setDatasourceId('entity:node');
      $field_publication_title->setBoost(1);
      $field_publication_title->setLabel('Publication » Content » Title');
      $index->addField($field_publication_title);
    }
    if (!$index->getField('field_publication_nid')) {
      $field_publication_nid = new Field($index, 'field_publication_nid');
      $field_publication_nid->setType('integer');
      $field_publication_nid->setPropertyPath('field_publication:entity:nid');
      $field_publication_nid->setDatasourceId('entity:node');
      $field_publication_nid->setBoost(1);
      $field_publication_nid->setLabel('Publication » Content » ID');
      $index->addField($field_publication_nid);
    }
    if (!$index->getField('field_publication_uuid')) {
      $field_publication_uuid = new Field($index, 'field_publication_uuid');
      $field_publication_uuid->setType('string');
      $field_publication_uuid->setPropertyPath('field_publication:entity:uuid');
      $field_publication_uuid->setDatasourceId('entity:node');
      $field_publication_uuid->setBoost(1);
      $field_publication_uuid->setLabel('Publication » Content » UUID');
      $index->addField($field_publication_uuid);
    }

    $index->save();
  }
}

/**
 * Implements hook_update_dependencies().
 */
function tide_publication_update_dependencies() {
  $dependencies = [];
  $dependencies['tide_publication'][8001] = ['tide_landing_page' => 8008];
  $dependencies['tide_publication'][8009] = ['tide_core' => 8037];
  $dependencies['tide_publication'][8011] = [
    'tide_core' => 8045,
    'tide_landing_page' => 8037,
  ];

  return $dependencies;
}

/**
 * Add Complex Image component.
 */
function tide_publication_update_8001() {
  $content_types = ['publication', 'publication_page'];
  foreach ($content_types as $content_type) {
    $field_config = FieldConfig::loadByName('node', $content_type, 'field_landing_page_component');
    if ($field_config) {
      $handler_settings = $field_config->getSetting('handler_settings');
      $handler_settings['target_bundles']['complex_image'] = 'complex_image';
      $field_config->setSetting('handler_settings', $handler_settings);
      $field_config->save();
    }
  }
}

/**
 * Add field_tags into publication node type.
 */
function tide_publication_update_8002() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_publication') . '/config/install'];
  if (!FieldConfig::loadByName('node', 'publication', 'field_tags')) {
    _tide_import_single_config('field.field.node.publication.field_tags', $config_location, TRUE);
    _tide_import_single_config('core.entity_view_display.node.publication.default', $config_location, TRUE);
    _tide_import_single_config('core.entity_form_display.node.publication.default', $config_location, TRUE);
  }
}

/**
 * Change field_publication_authors from text field to taxonomy_term field.
 */
function tide_publication_update_8003() {
  // Required variables.
  $entity_type = 'node';
  $field_name = 'field_publication_authors';
  $field_storage = FieldStorageConfig::loadByName($entity_type, $field_name);
  // Database contention.
  $database = \Drupal::database();
  // The tables need to be updated.
  $tmp_table_names = [
    'tmp_table' => 'node__field_publication_authors',
    'tmp_revision_table' => 'node_revision__field_publication_authors',
  ];
  // field_publication_authors_target_id column specification.
  $spec = [
    'type' => 'int',
    'length' => 10,
    'unsigned' => TRUE,
  ];
  // Database manipulations.
  foreach ($tmp_table_names as $tmp => $table_name) {
    if ($database->schema()->tableExists($table_name)) {
      // Creates two tmp tables.
      $database->query("CREATE TABLE {$tmp} SELECT * FROM  {$table_name}");
      $database->truncate($table_name)->execute();
      // Adds field_publication_authors_target_id field for holding tids.
      $database->schema()
        ->addField($tmp, 'field_publication_authors_target_id', $spec);
      // Gets tids.
      $terms = $database->select($tmp, 't')
        ->fields('t', ['field_publication_authors_value'])
        ->execute()
        ->fetchCol();
      // Updates field_publication_authors_target_id with correct tid.
      foreach ($terms as $term) {
        $tids = \Drupal::entityQuery('taxonomy_term')
          ->condition('name', $term)
          ->execute();
        if ($tids) {
          $tid = (int) reset($tids);
          $database->update($tmp)
            ->fields(['field_publication_authors_target_id' => $tid])
            ->condition('field_publication_authors_value', $term)
            ->execute();
        }
      }
      // Deletes rows that has no tid associated.
      $database->delete($tmp)
        ->condition('field_publication_authors_target_id', NULL, 'IS')
        ->execute();
      // Delete field_publication_authors_value column.
      $database->schema()->dropField($tmp, 'field_publication_authors_value');

      // Do some changes in field field tables.
      $database->schema()
        ->changeField($table_name, 'field_publication_authors_value', 'field_publication_authors_target_id', $spec);
    }
  }

  // Update FieldStorageConfig.
  $new_field_storage = $field_storage->toArray();
  $new_field_storage['type'] = 'entity_reference';
  $new_field_storage['dependencies'] = [
    'module' => [
      'node',
      'taxonomy',
    ],
  ];
  $new_field_storage['settings'] = ['target_type' => 'taxonomy_term'];
  $new_field_storage['cardinality'] = 1;
  $new_field_storage['module'] = 'core';
  $new_field_storage = FieldStorageConfig::create($new_field_storage);
  $new_field_storage->original = $new_field_storage;
  $new_field_storage->enforceIsNew(FALSE);
  $new_field_storage->save();

  // Update field.
  foreach ($field_storage->getBundles() as $bundle => $label) {
    $field = FieldConfig::loadByName($entity_type, $bundle, $field_name);
    $new_field = $field->toArray();
    $new_field['field_type'] = 'entity_reference';
    $new_field['dependencies'] = [
      'config' => [
        'field.storage.' . $field_storage->id(),
        'node.type.' . $bundle,
        'taxonomy.vocabulary.department',
      ],
    ];
    $new_field['settings'] = [
      'handler_settings' => [
        'target_bundles' => [
          'department' => 'department',
        ],
      ],
    ];
    $new_field = FieldConfig::create($new_field);
    $new_field->original = $field;
    $new_field->enforceIsNew(FALSE);
    $new_field->save();
  }
  // Data migration.
  foreach ($tmp_table_names as $tmp => $table_name) {
    $database->insert($table_name)->from($database->select($tmp, 't')
      ->fields('t'))->execute();
    $database->schema()->dropTable($tmp);
  }
  drupal_flush_all_caches();
}

/**
 * Enable path enhancer.
 */
function tide_publication_update_8004() {
  $moduleHandler = \Drupal::service('module_handler');
  if ($moduleHandler->moduleExists('jsonapi') && $moduleHandler->moduleExists('jsonapi_extras')) {
    $config_factory = \Drupal::configFactory();
    $configs = [
      'jsonapi_extras.jsonapi_resource_config.node--publication',
      'jsonapi_extras.jsonapi_resource_config.node--publication_page',
    ];
    foreach ($configs as $config) {
      $jsonapi_settings = $config_factory->getEditable($config);
      $resource_fields = $jsonapi_settings->get('resourceFields');
      $resource_fields['path']['enhancer']['id'] = 'path_enhancer';
      $jsonapi_settings->set('resourceFields', $resource_fields)->save(TRUE);
    }
  }
}

/**
 * Updating field_publication_authors to give option to add multiple authors.
 */
function tide_publication_update_8005() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('field.storage.node.field_publication_authors');
  $config->set('cardinality', -1);
  $config->save();
}

/**
 * Add re-order children permission for roles.
 */
function tide_publication_update_8006() {
  if (\Drupal::moduleHandler()->moduleExists('entity_hierarchy')) {
    $roles = [
      'approver',
      'editor',
      'site_admin',
    ];
    foreach ($roles as $role_name) {
      $role = Role::load($role_name);
      if ($role) {
        $role->grantPermission('reorder entity_hierarchy children');
        $role->save();
      }
    }
  }
}

/**
 * Enable entity type/bundles for use with scheduled transitions.
 */
function tide_publication_update_8007() {
  if (\Drupal::moduleHandler()->moduleExists('scheduled_transitions')) {
    $config_factory = \Drupal::configFactory();
    $config = $config_factory->getEditable('scheduled_transitions.settings');
    $bundles = $config->get('bundles');
    if ($bundles) {
      foreach ($bundles as $bundle) {
        $enabled_bundles = [];
        $enabled_bundles[] = $bundle['bundle'];
      }
      if (!in_array('publication', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'publication'];
        $config->set('bundles', $bundles)->save();
      }
      if (!in_array('publication_page', $enabled_bundles)) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => 'publication_page'];
        $config->set('bundles', $bundles)->save();
      }
    }
    else {
      $publication_bundles = [
        'publication',
        'publication_page',
      ];
      foreach ($publication_bundles as $bundle) {
        $bundles[] = ['entity_type' => 'node', 'bundle' => $bundle];
        $config->set('bundles', $bundles);
      }
      $config->save();
    }
  }
}

/**
 * Widget change.
 *
 * Changes the field_publication_authors widget to
 * entity_reference_autocomplete_tags type.
 */
function tide_publication_update_8008() {
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
  $entity_form_display = \Drupal::entityTypeManager()
    ->getStorage('entity_form_display')
    ->load('node.publication.default');
  if ($entity_form_display) {
    $settings = $entity_form_display->getComponent('field_publication_authors');
    if (isset($settings['type']) && $settings['type'] != 'entity_reference_autocomplete') {
      $settings['type'] = 'entity_reference_autocomplete';
      $entity_form_display->setComponent('field_publication_authors', $settings);
      $entity_form_display->save();
    }
  }
}

/**
 * Add field display headings for table of contents.
 */
function tide_publication_update_8009() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_publication') . '/config/install'];
  $new_fields = [
    'field.field.node.publication_page.field_node_display_headings',
    'field.field.node.publication.field_node_display_headings',
  ];
  foreach ($new_fields as $new_field) {
    $config_read = _tide_read_config($new_field, $config_location, TRUE);
    // Obtain the storage manager for field instances.
    // Create a new field instance from the yaml configuration and save.
    \Drupal::entityTypeManager()->getStorage('field_config')
      ->create($config_read)
      ->save();
  }
  $config_factory = \Drupal::configFactory();
  // Add to form display.
  $new_displayss = [
    'core.entity_form_display.node.publication_page.default' => 'field.field.node.publication_page.field_node_display_headings',
    'core.entity_form_display.node.publication.default' => 'field.field.node.publication.field_node_display_headings',
  ];
  foreach ($new_displayss as $display => $field) {
    $config = $config_factory->getEditable($display);

    $dependencies = $config->get('dependencies.config');
    if (!in_array($field, $dependencies)) {
      $dependencies[] = $field;
      $config->set('dependencies.config', $dependencies);
    }
    $group_body_content = 'third_party_settings.field_group.group_body_content.children';
    $third_party_settings = $config->get($group_body_content);
    if (!isset($third_party_settings['field_node_display_headings'])) {
      $third_party_settings = [
        'field_show_table_of_content',
        'field_node_display_headings',
        'field_landing_page_component',
      ];
      $config->set($group_body_content, $third_party_settings);
      if ($display === 'core.entity_form_display.node.publication.default') {
        $third_party_settings[] = 'field_node_documents';
        $config->set($group_body_content, $third_party_settings);
      }
    }
    $table_of_content_weight = $config->get('content.field_show_table_of_content.weight');
    $content = $config->get('content');
    if (!isset($content['field_node_display_headings'])) {
      $content['field_node_display_headings'] = [
        'weight' => $table_of_content_weight + 1,
        'settings' => [],
        'third_party_settings' => [],
        'type' => 'options_buttons',
        'region' => 'content',
      ];
      $config->set('content', $content);
    }
    // Increase weight to sit below the new field.
    $landing_page_component = $config->get('content.field_landing_page_component.weight');
    $config->set('content.field_landing_page_component.weight', $landing_page_component + 1);
    $config->save();
  }
  // Add Json.
  $json_feilds = [
    'jsonapi_extras.jsonapi_resource_config.node--publication_page',
    'jsonapi_extras.jsonapi_resource_config.node--publication',
  ];
  foreach ($json_feilds as $field) {
    $json_config = $config_factory->getEditable($field);
    $json_content = $json_config->get('resourceFields');
    if (!isset($json_content['field_node_display_headings'])) {
      $json_content['field_node_display_headings'] = [
        'fieldName' => 'field_node_display_headings',
        'publicName' => 'field_node_display_headings',
        'enhancer' => [
          'id' => '',
        ],
        'disabled' => FALSE,
      ];
      $json_config->set('resourceFields', $json_content);
    }
    $json_config->save();
  }
  // Update show table of content label.
  $fields = [
    'field.field.node.publication_page.field_show_table_of_content',
    'field.field.node.publication.field_show_table_of_content',
  ];
  foreach ($fields as $field) {
    $field_config = $config_factory->getEditable($field);
    $description = 'The table of contents is automatically built from the heading structure of your page.';
    $field_config->set('description', $description);
    $field_config->save();
  }
}

/**
 * Add hero image fields.
 */
function tide_publication_update_8010() {
  module_load_include('inc', 'tide_core', 'includes/helpers');
  $config_location = [\Drupal::service('extension.list.module')->getPath('tide_publication') . '/config/install'];
  $new_fields = [
    'field.field.node.publication_page.field_landing_page_hero_image',
    'field.field.node.publication_page.field_landing_page_hero_theme',
    'field.field.node.publication.field_landing_page_hero_image',
    'field.field.node.publication.field_landing_page_hero_theme',
  ];
  foreach ($new_fields as $new_field) {
    $config_read = _tide_read_config($new_field, $config_location, TRUE);
    // Obtain the storage manager for field instances.
    // Create a new field instance from the yaml configuration and save.
    \Drupal::entityManager()->getStorage('field_config')
      ->create($config_read)
      ->save();
  }
  // Add to form display.
  $displays = [
    'node.publication_page.default',
    'node.publication.default',
  ];
  foreach ($displays as $display) {
    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity_form_display */
    $entity_form_display = Drupal::entityTypeManager()
      ->getStorage('entity_form_display')
      ->load($display);
    $hero_image_wight = ($display === 'node.publication_page.default') ? 9 : 4;
    $hero_theme_wight = ($display === 'node.publication_page.default') ? 10 : 4;
    if ($entity_form_display) {
      $entity_form_display->setComponent('field_landing_page_hero_image', [
        'weight' => $hero_image_wight,
        'settings' => [
          'entity_browser' => 'tide_image_browser',
          'field_widget_display' => 'rendered_entity',
          'field_widget_display_settings' => [
            'view_mode' => 'default',
          ],
          'field_widget_edit' => TRUE,
          'field_widget_remove' => TRUE,
          'selection_mode' => 'selection_append',
          'field_widget_replace' => FALSE,
          'open' => FALSE,
        ],
        'third_party_settings' => [],
        'type' => 'entity_browser_entity_reference',
        'region' => 'content',
      ]);
      $entity_form_display->setComponent('field_landing_page_hero_theme', [
        'weight' => $hero_theme_wight,
        'settings' => [],
        'third_party_settings' => [],
        'type' => 'options_select',
        'region' => 'content',
      ]);

      // Set Field group.
      $field_group = $entity_form_display->getThirdPartySettings('field_group');
      if (!empty($field_group['group_page_header']['children'])) {
        if (!in_array('field_landing_page_hero_image', $field_group['group_page_header']['children'])) {
          $field_group['group_page_header']['children'][] = 'field_landing_page_hero_image';
          $entity_form_display->setThirdPartySetting('field_group', 'group_page_header', $field_group['group_page_header']);
        }
        if (!in_array('field_landing_page_hero_theme', $field_group['group_page_header']['children'])) {
          $field_group['group_page_header']['children'][] = 'field_landing_page_hero_theme';
          $entity_form_display->setThirdPartySetting('field_group', 'group_page_header', $field_group['group_page_header']);
        }
      }
      $entity_form_display->save();
      // Set other fields to show below hero image.
      $content = $entity_form_display->get('content');
      if (isset($content['field_publication_date']) && $display === 'node.publication.default') {
        $content['field_publication_date']['weight'] = 5;
      }
      if (isset($content['field_landing_page_intro_text']) && $display === 'node.publication_page.default') {
        $content['field_landing_page_intro_text']['weight'] = 11;
      }
      if (isset($content['field_landing_page_summary']) && $display === 'node.publication_page.default') {
        $content['field_landing_page_summary']['weight'] = 12;
      }
      $entity_form_display->set('content', $content)->save();
    }
    // Update view_displays.
    $entity_view_display = \Drupal::entityTypeManager()
      ->getStorage('entity_view_display')
      ->load($display);
    if ($entity_view_display) {
      $entity_view_display->setComponent('field_landing_page_hero_image', [
        'weight' => 122,
        'label' => 'above',
        'settings' => [
          'link' => TRUE,
        ],
        'third_party_settings' => [],
        'type' => 'entity_reference_label',
        'region' => 'content',
      ]);
      $entity_view_display->setComponent('field_landing_page_hero_theme', [
        'weight' => 123,
        'label' => 'above',
        'settings' => [],
        'third_party_settings' => [],
        'type' => 'list_default',
        'region' => 'content',
      ]);
      $entity_view_display->save();
    }
  }
  $json_file_name = [
    'node--publication_page',
    'node--publication',
  ];
  foreach ($json_file_name as $file_name) {
    // Add paragraph type to JSON.
    $json_field = 'jsonapi_extras.jsonapi_resource_config.' . $file_name;
    $config_location = [\Drupal::service('extension.list.module')->getPath('tide_publication') . '/config/optional'];
    $config_storage = \Drupal::service('config.storage');
    $config_read = _tide_read_config($json_field, $config_location, TRUE);
    $config_storage->write($json_field, $config_read);
  }
}

/**
 * Update node form of Publication.
 */
function tide_publication_update_8011() {
  module_load_install('tide_landing_page');

  // Add the new cards to field_landing_page_component of Publication Page.
  $field = FieldConfig::loadByName('node', 'publication_page', 'field_landing_page_component');
  if ($field) {
    $handler_settings = $field->getSetting('handler_settings');
    if (isset($handler_settings['target_bundles']) && !in_array('navigation_card', $handler_settings['target_bundles'])) {
      $handler_settings['target_bundles']['navigation_card'] = 'navigation_card';
      $handler_settings['target_bundles']['promotion_card'] = 'promotion_card';
      $handler_settings['target_bundles_drag_drop']['navigation_card']['enabled'] = TRUE;
      $handler_settings['target_bundles_drag_drop']['promotion_card']['enabled'] = TRUE;

      // Remove legacy cards.
      $legacy_cards = [
        'card_navigation' => 'navigation_card',
        'card_navigation_auto' => 'navigation_card',
        'card_navigation_featured' => 'navigation_card',
        'card_navigation_featured_auto' => 'navigation_card',
        'card_promotion' => 'promotion_card',
        'card_promotion_auto' => 'promotion_card',
        'card_event' => 'promotion_card',
        'card_event_auto' => 'promotion_card',
      ];
      foreach ($legacy_cards as $legacy_card => $new_card) {
        unset($handler_settings['target_bundles'][$legacy_card]);
        unset($handler_settings['target_bundles_drag_drop'][$legacy_card]);
      }

      $field->setSetting('handler_settings', $handler_settings);
      $field->save();
    }
  }

  $update_field_config = [
    'field_landing_page_intro_text' => [
      'label' => t('Introduction text'),
    ],
    'field_landing_page_hero_image' => [
      'description' => t("Full-width background images display at the top of the page behind the page title. One image can be added and must be 1600px wide x 600px high. If a hero image is used, header links will not display."),
    ],
    'field_node_documents' => [
      'description' => t('Add the original document to this publication. Format is PDF document. This will sits on the right hand side of the page'),
    ],
    'field_publication_date' => [
      'label' => t('Date of publication'),
    ],
    'field_featured_image' => [
      'description' => t("Feature images don't display on this page. They display in featured card or navigation links to this page. Must be 496px high x 818px wide."),
    ],
    'field_publication_authors' => [
      'label' => t('Publication author'),
      'description' => t('Use this field to select an author. Choose one mostly applicable.'),
    ],
    'field_landing_page_component' => [
      'description' => t('<p>Add text, links, media and cards to build your page.</p>'),
    ],
    'field_show_table_of_content' => [
      'label' => t('Show table of contents?'),
    ],
    'field_show_social_sharing' => [
      'label' => t('Social sharing'),
      'required' => TRUE,
      'description' => t('The social sharing box can be hidden in special circumstances.'),
    ],
    'field_show_related_content' => [
      'label' => t('Show related content?'),
    ],
    'field_landing_page_show_contact' => [
      'label' => t('Show contact details'),
    ],
    'field_landing_page_contact' => [
      'label' => t('Contact us'),
    ],
    'field_show_content_rating' => [
      'label' => t('Show content rating?'),
      'description' => t("Show 'Was this page helpful?' feedback form. Do not uncheck this form without admin approval."),
    ],
  ];

  $update_field_widgets = [
    // Header.
    'field_publication' => ['weight' => -10],
    'title' => ['weight' => 0],
    'field_landing_page_summary' => ['weight' => 10],
    'field_landing_page_intro_text' => ['weight' => 20],
    // Customised Header.
    'field_landing_page_hero_image' => [
      'settings' => ['open' => TRUE],
      'weight' => 20,
    ],
    'field_landing_page_hero_theme' => [
      'settings' => ['open' => TRUE],
      'weight' => 25,
    ],
    // Featured image.
    'field_featured_image' => [
      'settings' => ['open' => TRUE],
      'weight' => -90,
    ],
    // Content.
    'field_landing_page_component' => [
      'settings' => ['add_mode' => 'modal'],
    ],
    // Sidebar.
    'field_node_documents' => [
      'weight' => 0,
    ],
    'field_related_links' => [
      'type' => 'entity_reference_paragraphs',
      'settings' => [
        'title' => t('Link'),
        'title_plural' => t('Links'),
        'edit_mode' => 'closed',
        'add_mode' => 'button',
        'form_display_mode' => 'default',
        'default_paragraph_type' => '_none',
      ],
    ],
    'field_show_social_sharing' => [
      'type' => 'options_buttons',
      'weight' => 40,
    ],
    // General.
    'field_topic' => ['weight' => 0],
    'field_show_content_rating' => ['weight' => 2],
  ];

  // Use Select2 for Publication Authors field.
  if (\Drupal::moduleHandler()->moduleExists('select2')) {
    foreach (['field_publication_authors'] as $select2_field) {
      $update_field_widgets[$select2_field]['type'] = 'select2_entity_reference';
      $update_field_widgets[$select2_field]['settings'] = [
        'match_operator' => 'CONTAINS',
        'match_limit' => 10,
        'autocomplete' => FALSE,
        'width' => '100%',
      ];
    }
  }

  $bundles = ['publication', 'publication_page'];
  foreach ($bundles as $bundle) {
    // Update the field instances.
    foreach ($update_field_config as $field_name => $replacements) {
      /** @var \Drupal\Core\Field\FieldConfigInterface $field_config */
      $field_config = FieldConfig::loadByName('node', $bundle, $field_name);
      if ($field_config) {
        $config = $field_config->toArray();
        $config = array_replace_recursive($config, $replacements);
        /** @var \Drupal\Core\Field\FieldConfigInterface $new_field_config */
        $new_field_config = FieldConfig::create($config);
        $new_field_config->original = $field_config;
        $new_field_config->enforceIsNew(FALSE);
        $new_field_config->save();
      }
    }

    /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
    $form_display = EntityFormDisplay::load('node.' . $bundle . '.default');
    if (!$form_display) {
      continue;
    }

    // Update field widgets.
    foreach ($update_field_widgets as $field => $replacements) {
      if (!is_array($replacements)) {
        $replacements = ['weight' => $replacements];
      }
      $component = $form_display->getComponent($field);
      if ($component) {
        $component = array_replace_recursive($component, $replacements);
        $form_display->setComponent($field, $component);
      }
    }

    // Update the field groups.
    $field_group = $form_display->getThirdPartySettings('field_group');

    // Header section.
    $field_group['group_section_header'] = _tide_landing_page_new_field_group_tabs('Header Section',
      'horizontal', 'node-form-group-header-section', '', 'content', -100);
    $field_group['group_section_header']['children'] = [
      'group_header',
      'group_customised_header',
    ];

    // Header - Header tab.
    $field_group['group_header'] = _tide_landing_page_new_field_group_tab('Header',
      'group_section_header', [], 'content', -99);
    $field_group['group_header']['children'] = [
      'field_publication',
      'title',
      'field_landing_page_summary',
      'field_landing_page_intro_text',
    ];

    // Header - Customised header tab.
    $field_group['group_customised_header'] = _tide_landing_page_new_field_group_tab('Customised Header',
      'group_section_header', [], 'content', -98);
    $field_group['group_customised_header']['children'] = [
      'field_landing_page_hero_image',
      'field_landing_page_hero_theme',
    ];

    // Publication metadata.
    if ($bundle === 'publication') {
      $field_group['group_publication_metadata'] = [
        'label' => 'Publication metadata',
        'format_type' => 'html_element',
        'format_settings' => [
          'open' => TRUE,
          'collapsible' => FALSE,
          'element' => 'div',
          'show_label' => FALSE,
          'label_element' => 'h3',
          'label_element_classes' => '',
          'required_fields' => TRUE,
          'attributes' => '',
          'classes' => 'seven-details js-form-wrapper form-wrapper seven-details__wrapper details-wrapper',
        ],
        'children' => [
          'field_license_type',
          'field_publication_date',
          'field_publication_authors',
        ],
        'region' => 'content',
        'weight' => -80,
      ];
    }

    // Content section.
    $field_group['group_section_content'] = _tide_landing_page_new_field_group_tabs('Content Section',
      'horizontal', 'node-form-group-content-section', '', 'content', -70);
    $field_group['group_section_content']['children'] = [
      'group_body_content',
    ];
    // Content - Page content tab.
    if (isset($field_group['group_body_content'])) {
      $field_group['group_body_content'] = array_replace_recursive($field_group['group_body_content'], [
        'label' => 'Page content',
        'format_type' => 'tab',
        'parent_name' => 'group_section_content',
        'region' => 'content',
        'weight' => -79,
      ]);
    }

    // Sidebar section.
    $field_group['group_section_sidebar'] = _tide_landing_page_new_field_group_tabs('Sidebar Section',
      'horizontal', 'node-form-group-sidebar-section', '', 'content', -60, '',
      ['group_sidebar']);
    // Sidebar - Sidebar tab.
    $field_group['group_sidebar'] = _tide_landing_page_new_field_group_tab('Sidebar',
      'group_section_sidebar', [], 'content', -61);
    $field_group['group_sidebar']['children'] = [
      'field_node_documents',
      'group_publication_navigation',
      'group_related_links',
      'group_contact',
      'field_show_social_sharing',
    ];
    if (isset($field_group['group_publication_navigation'])) {
      $field_group['group_publication_navigation'] = array_replace_recursive($field_group['group_publication_navigation'],
        [
          'format_type' => 'details',
          'format_settings' => [
            'open' => FALSE,
            'description' => t('Add publication navigation to your page. This will sits on the right hand side of the page.'),
          ],
          'parent_name' => 'group_sidebar',
          'region' => 'content',
          'weight' => 10,
        ]);
    }
    if (isset($field_group['group_related_links'])) {
      $field_group['group_related_links'] = array_replace_recursive($field_group['group_related_links'],
        [
          'format_type' => 'details',
          'format_settings' => [
            'open' => FALSE,
            'description' => t('Related pages can be linked from this sidebar.'),
          ],
          'parent_name' => 'group_sidebar',
          'region' => 'content',
          'weight' => 20,
        ]);
    }
    if (isset($field_group['group_contact'])) {
      $field_group['group_contact'] = array_replace_recursive($field_group['group_contact'],
        [
          'label' => t('Contact'),
          'format_type' => 'details',
          'format_settings' => [
            'open' => FALSE,
            'description' => t('Specific contact details - name, address, phone, email can be added in a block to the sidebar.'),
          ],
          'children' => [
            'field_landing_page_show_contact',
            'field_landing_page_contact',
          ],
          'parent_name' => 'group_sidebar',
          'region' => 'content',
          'weight' => 30,
        ]);
    }

    foreach ($field_group as $group_name => $group_settings) {
      $form_display->setThirdPartySetting('field_group', $group_name, $group_settings);
    }

    // Removes unused groups.
    $unused_groups = [
      'group_section_1',
      'group_header_content',
      'group_page_header',
      'group_top_banner',
      'group_bottom_',
      'group_right_column',
      'group_blocks',
      'group_social_sharing',
    ];
    foreach ($unused_groups as $group_name) {
      unset($field_group[$group_name]);
      $form_display->unsetThirdPartySetting('field_group', $group_name);
    }

    $form_display->save();
  }
}

/**
 * Removed featured_news option from the landing_page widget.
 */
function tide_publication_update_8012() {
  $field = FieldConfig::loadByName('node', 'publication_page', 'field_landing_page_component');
  if ($field) {
    $handler_settings = $field->getSetting('handler_settings');
    if (isset($handler_settings['target_bundles'])) {
      if (isset($handler_settings['target_bundles']['featured_news'])) {
        unset($handler_settings['target_bundles']['featured_news']);
      }
      if (isset($handler_settings['target_bundles_drag_drop']['featured_news'])) {
        unset($handler_settings['target_bundles_drag_drop']['featured_news']);
      }
      $field->setSetting('handler_settings', $handler_settings);
      $field->save();
    }
  }
}

/**
 * Installs new statistics_grid paragraph type.
 */
function tide_publication_update_8013() {
  // Add the new paragraph type to field_landing_page_component.
  $bundles = ['publication', 'publication_page'];
  foreach ($bundles as $bundle) {
    $field = FieldConfig::loadByName('node', $bundle, 'field_landing_page_component');
    if ($field) {
      $handler_settings = $field->getSetting('handler_settings');
      if (isset($handler_settings['target_bundles']) && !in_array('statistics_grid', $handler_settings['target_bundles'])) {
        $handler_settings['target_bundles']['statistics_grid'] = 'statistics_grid';
        $handler_settings['target_bundles_drag_drop']['statistics_grid']['enabled'] = TRUE;
        $field->setSetting('handler_settings', $handler_settings);
        $field->save();
      }
    }
  }
}

/**
 * Removed featured_news option from the landing_page widget.
 */
function tide_publication_update_8014() {
  $field = FieldConfig::loadByName('node', 'publication_page', 'field_landing_page_component');
  if ($field) {
    $handler_settings = $field->getSetting('handler_settings');
    if (isset($handler_settings['target_bundles'])) {
      if (isset($handler_settings['target_bundles']['featured_news'])) {
        unset($handler_settings['target_bundles']['featured_news']);
      }
      if (isset($handler_settings['target_bundles_drag_drop']['featured_news'])) {
        unset($handler_settings['target_bundles_drag_drop']['featured_news']);
      }
      $field->setSetting('handler_settings', $handler_settings);
      $field->save();
    }
  }
}

/**
 * Update Publication metadata group to use fieldset.
 */
function tide_publication_update_8015() {
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
  $form_display = EntityFormDisplay::load('node.publication.default');
  $field_group = $form_display->getThirdPartySettings('field_group');
  $group_settings = [
    'label' => '',
    'format_type' => 'fieldset',
    'format_settings' => [
      'show_empty_fields' => FALSE,
      'id' => '',
      'description' => '',
      'required_fields' => TRUE,
      'classes' => '',
    ],
    'children' => [
      'field_license_type',
      'field_publication_date',
      'field_publication_authors',
    ],
    'region' => 'content',
    'weight' => -80,
  ];
  if (isset($field_group['group_publication_metadata'])) {
    $form_display->setThirdPartySetting('field_group', 'group_publication_metadata', $group_settings);
    $form_display->save();
  }
}
